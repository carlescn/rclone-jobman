#!/usr/bin/env bash

###################################################################
# Script Name : rclone-jobman
# Description : Simple sync-job manager for rclone.
# Args        : [None]
#                 Runs interactively with a simple text menu.
#                 It load the available jobs from the files in 
#                 ~/.config/rclone-jobman/jobs
#               [job_file_name]
#                 The file must exist in ~/.config/rclone-jobman/jobs.
#                 It runs the corresponding job withou asking for user input
#                 (intended for automation).
# Author      : CarlesCN
# E-mail      : carlesbioinformatics@gmail.com
# License     : GNU General Public License v3.0
###################################################################

# -e script ends on error (exit != 0)
# -u error if undefined variable
# -o pipefail script ends if piped command fails
set -euo pipefail

readonly script_name="rclone-jobman"
readonly conf_path="$HOME/.config/rclone-jobman"
script_dir=$(dirname "$(realpath "$0")"); readonly script_dir
readonly box_width=100

source "$script_dir/rclone-jobman_common_functions.sh"
source "$script_dir/rclone-jobman_submenus.sh"
source "$script_dir/rclone-jobman_newjob.sh"

function usage() {
    echo "Usage: $script_name [job_file]"
}

function call_rclone() {
    local job_file=$1

    # Read params from file
    local dry_run; dry_run=$(read_job_file_line "$job_file" dry_run)
    local job_name; job_name=$(read_job_file_line "$job_file" job_name)
    local source_path; source_path=$(read_job_file_line "$job_file" source_path)                 # can't check if dir exists, could be in remote
    local destination_path; destination_path=$(read_job_file_line "$job_file" destination_path)  # can't check if dir exists, could be in remote
    local job_basename; job_basename=$(basename "$job_file")

    # Set some file paths
    local config_file="$HOME/.config/rclone/rclone.conf";               exit_if_file_missing "$config_file"
    local filterfrom_file="$conf_path/filterfrom/$job_basename.filter"; exit_if_file_missing "$filterfrom_file"
    local lock_file="$conf_path/lock/$job_basename.lock"                # it's OK if file doesn't exist
    local log_file="$conf_path/log/$job_basename.log"                   # it's OK if file doesn't exist
    [[ -f "$log_file" ]] && rm "$log_file" # Remove last log file to keep its size manageable

    # Print the job info
    echo -e "\nRunning job \"$job_name\"..."
    echo -e "Source path . . : $source_path \nDestination path: $destination_path"
    [[ "$dry_run" == "TRUE" ]] && echo "INFO: --dry-run is set. This will NOT make any real changes."
    echo ""
    # Display a notification
    DISPLAY=:0 DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus notify-send "Starting sync $job_name"

    # Set the rclone parameters                            # Params description:
    local rclone_params=(sync)                             # makes destination identic to source
    rclone_params+=(--config "$config_file")               # read config from $config_file.
    rclone_params+=(--log-level INFO)                      # INFO: prints everything but debug events. DEBUG: prints ALL events.
    rclone_params+=(--log-file "$log_file")                # save log to $log_file.
    rclone_params+=(--filter-from "$filterfrom_file")      # filter files as in $filterfrom_file.
    rclone_params+=(--progress)                            # show progress.
    rclone_params+=(--links)                               # store local symlinks as text files '.rclonelink' in remote server.
    rclone_params+=(--track-renames)                       # moved files will be moved remotely server-side (instead of deleted and reuploaded)
    [[ "$dry_run" == TRUE ]] && rclone_params+=(--dry-run) # rclone will NOT actually write to destination. This is controlled by the "dry_run=" line in the job config file.
    rclone_params+=("$source_path")
    rclone_params+=("$destination_path")

    # Call rclone using flock (it will prevent from calling rclone if the job is already running, i.e. $lock_file exists).
    flock -n "$lock_file" rclone "${rclone_params[@]}"
}

function time_since_file_modified() {
    local file=$1
    [[ ! -f "$file" ]] && echo "NEVER!" && return 0
    local seconds; seconds=$(("$(date -u +%s)" - "$(date -ur "$file" +%s)"))
    echo "$((seconds/3600/24)) days and $((seconds/3600%24)) hours"
}

function run_interactive() {
    local files_array job_file job_name log_file last_sync index

    while true; do
        # Get all the files in the jobs folder
        mapfile -t files_array < <(ls -d "$conf_path"/jobs/*)
        
        # Set the menu entries
        local menu_entries=()
        for index in "${!files_array[@]}"; do
            job_file="${files_array[$index]}"
            job_name=$(read_job_file_line "$job_file" job_name)
            log_file="$conf_path/log/$(basename "$job_file").log"
            last_sync=$(time_since_file_modified "$log_file")
            menu_entries+=("$index" "  Run job $job_name [last sync: $last_sync]")
        done
        menu_entries+=("N" "  create New job.")   
        menu_entries+=("E" "  Edit job.")
        menu_entries+=("R" "  Remove job.")
        menu_entries+=("L" "  read Log file.")

        # Build the menu
        local menu_height=$(( "${#menu_entries[@]}" / 2))
        local box_height=$(( 8 + "$menu_height"))
        local menu_out
        menu_out=$(whiptail --backtitle "$script_name" --title "MAIN MENU" \
            --menu "Choose one option:" \
            "$box_height" "$box_width" "$menu_height" "${menu_entries[@]}" --cancel-button "Exit"\
            3>&1 1>&2 2>&3) || exit 0  # Cancel button returns 1 and makes the cript exit with non-zero code
        
        # Manage the output
        [[ -z "$menu_out" ]] && exit 4  # Should not happen (already have returned 0 if user pressed Cancel)
        case "$menu_out" in
            [0-$index]) call_rclone "$(realpath "${files_array[$menu_out]}")" || continue;;
            N)          create_new_job  || continue     ;;
            E)          submenu edit_job   "EDIT JOB"   ;;
            R)          submenu remove_job "REMOVE JOB" ;;
            L)          submenu show_log   "SHOW LOG"   ;;
        esac
    done
}

run_automatic(){
    local job_file="$conf_path/jobs/$1"; exit_if_file_missing "$job_file"
    call_rclone "$job_file"
}

function main() {
    case $# in
        0) run_interactive ;;
        1) run_automatic "$1" ;;
        *) exit_bad_usage ;;
    esac
    exit 0
}

main "${@}"