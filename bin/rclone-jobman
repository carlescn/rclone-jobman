#!/usr/bin/env bash

###################################################################
# Script Name : rclone-jobman
# Description : Simple sync-job manager for rclone.
# Args        : [None]
#                 Runs interactively with a simple text menu.
#                 It load the available jobs from the files in 
#                 ~/.config/rclone-jobman/jobs
#               [job filename]
#                 The file must exist in ~/.config/rclone-jobman/jobs.
#                 It runs the corresponding job withou asking for user input
#                 (intended for automation).
# Author      : CarlesCN
# E-mail      : carlesbioinformatics@gmail.com
# License     : GNU General Public License v3.0
###################################################################

# -e script ends on error (exit != 0)
# -u error if undefined variable
# -o pipefail script ends if piped command fails
set -euo pipefail

readonly scriptName="rclone-jobman.sh"
readonly confPath="$HOME/.config/rclone-jobman"
scriptDir=$(dirname "$(realpath "$0")"); readonly scriptDir

source "$scriptDir/rclone-jobman_common_functions.sh"
source "$scriptDir/rclone-jobman_submenus.sh"
source "$scriptDir/rclone-jobman_newjob.sh"

function usage() {
    echo "Usage: $scriptName [ job_file ]"
}

function callRclone() {
    local jobFile=$1

    # Read params from file
    local dryrun; dryrun=$(readJobFileLine "$jobFile" dryrun)
    local jobName; jobName=$(readJobFileLine "$jobFile" jobName)
    local sourcePath; sourcePath=$(readJobFileLine "$jobFile" sourcePath)                 # can't check if dir exists, could be in remote
    local destinationPath; destinationPath=$(readJobFileLine "$jobFile" destinationPath)  # can't check if dir exists, could be in remote
    local jobBasename; jobBasename=$(basename "$jobFile")

    # Set some file paths
    local configFile="$HOME/.config/rclone/rclone.conf";              exitIfFileMissing "$configFile"
    local filterfromFile="$confPath/filter-from/$jobBasename.filter"; exitIfFileMissing "$filterfromFile"
    local lockFile="$confPath/lock/$jobBasename.lock"                 # it's OK if file doesn't exist
    local logFile="$confPath/log/$jobBasename.log"                    # it's OK if file doesn't exist
    [[ -f "$logFile" ]] && rm "$logFile" # Remove last log file to keep its size manageable

    # Print the job info
    echo -e "\nRunning job \"$jobName\"..."
    echo -e "Source path . . : $sourcePath \nDestination path: $destinationPath"
    [[ "$dryrun" == "TRUE" ]] && echo "INFO: --dry-run is set. This will NOT make any real changes."
    echo ""
    # Display a notification
    DISPLAY=:0 DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus notify-send "Starting sync $jobName"

    # Set the rclone parameters                         # Params description:
    local rcloneParams=(sync)                           # makes destination identic to source
    rcloneParams+=(--config "$configFile")              # read config from $configFile.
    rcloneParams+=(--log-level INFO)                    # INFO: prints everything but debug events. DEBUG: prints ALL events.
    rcloneParams+=(--log-file "$logFile")               # save log to $logFile.
    rcloneParams+=(--filter-from "$filterfromFile")     # filter files as in $filterfromFile.
    rcloneParams+=(--progress)                          # show progress.
    rcloneParams+=(--links)                             # store local symlinks as text files '.rclonelink' in remote server.
    rcloneParams+=(--track-renames)                     # moved files will be moved remotely server-side (instead of deleted and reuploaded)
    [[ "$dryrun" == TRUE ]] && rcloneParams+=(--dry-run) # rclone will NOT actually write to destination. This is controlled by the "dryrun=" line in the job config file.
    rcloneParams+=("$sourcePath")
    rcloneParams+=("$destinationPath")

    # Call rclone using flock (it will prevent from calling rclone if the job is already running, i.e. $lockFile exists).
    flock -n "$lockFile" rclone "${rcloneParams[@]}" || echo "Job is already running!"
}

function timeSinceModified() {
    local file=$1
    [[ ! -f "$file" ]] && echo "NEVER!" && return 0
    local seconds; seconds=$(("$(date -u +%s)" - "$(date -ur "$file" +%s)"))
    echo "$((seconds/3600/24)) days and $((seconds/3600%24)) hours"
}

function runInteractive() {
    local filesArray jobFile jobName logFile idx userInput

    while true; do
        # Get all the files in the jobs folder
        mapfile -t filesArray < <(ls -d "$confPath"/jobs/*)
        
        # Print the menu
        echo "" # Blank line for clearer presentation
        echo "rclone-jobman - MAIN MENU:"
        for idx in "${!filesArray[@]}"; do
            jobFile=${filesArray[$idx]}
            jobName=$(readJobFileLine "$jobFile" jobName)
            logFile="$confPath/log/$(basename "$jobFile").log"
            echo "$idx) $jobName" >&2
            echo "   [last sync: $(timeSinceModified "$logFile")]" >&2
        done
        echo "-----------------------"
        echo "n) Create new job."
        echo "e) Edit job."
        echo "r) Remove job."
        echo "l) Read log file."
        echo "q) Exit."

        # Read the user input
        read -r -p "Choose one option: " userInput; echo ""
        case $userInput in
            [0-$idx]) callRclone "$(realpath "${filesArray[$userInput]}")" ;;
            n|N)      createNewJob || continue;;
            e|E)      submenu editJob   "EDIT JOB" ;;
            r|R)      submenu removeJob "REMOVE JOB" ;;
            l|L)      submenu showLog   "SHOW LOG" ;;
            q|Q|exit) break ;;
            *)        echo -e "Invalid option, try again! \n" ;;
        esac
    done
}

runAutomatic(){
    local jobFile="$confPath/jobs/$1"; exitIfFileMissing "$jobFile"
    callRclone "$jobFile"
}

function main() {
    case $# in
        0) runInteractive ;;
        1) runAutomatic "$1" ;;
        *) exitBadUsage ;;
    esac
    exit 0
}

main "${@}"